import pandas as pd
import numpy as np
import mlflow
import mlflow.sklearn
import os
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

#  Carregar os dados da planilha
file_path = "train_sorvete.xlsx"  # Certifique-se de que o arquivo está no mesmo diretório
df = pd.read_excel(file_path)

#  Preparar os dados
df = df.dropna()  # Remover valores ausentes
X = df[['Temperatura']].values  # Feature
y = df['Vendas'].values  # Target

# Dividir os dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#  Criar e treinar o modelo
model = LinearRegression()
model.fit(X_train, y_train)

#  Fazer previsões e calcular métricas
y_pred = model.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

import matplotlib.pyplot as plt

# Criar gráfico de dispersão
plt.scatter(X_test, y_test, color="blue", label="Dados Reais")
plt.plot(X_test, y_pred, color="red", linewidth=2, label="Regressão Linear")

# Adicionar rótulos
plt.xlabel("Temperatura (°C)")
plt.ylabel("Vendas de Sorvete")
plt.title("Regressão Linear: Vendas vs Temperatura")
plt.legend()
plt.grid()

# Mostrar gráfico
plt.show()

#  Configurar o MLflow
mlflow.set_tracking_uri("http://127.0.0.1:5000")  # Ajuste para o seu servidor MLflow
mlflow.set_experiment("Sorvete_Predictions")

#  Registrar o modelo e métricas no MLflow
with mlflow.start_run():
    mlflow.log_param("modelo", "Regressão Linear")
    mlflow.log_metric("RMSE", rmse)
    mlflow.log_metric("R2", r2)
    mlflow.sklearn.log_model(model, "modelo_sorvete")

print(f"Modelo salvo no MLflow com RMSE: {rmse:.2f} e R²: {r2:.2f}")

#  Salvar o modelo localmente para deploy
model_path = "modelo_sorvete.pkl"
mlflow.sklearn.save_model(model, model_path)
print(f"Modelo salvo em: {model_path}")
